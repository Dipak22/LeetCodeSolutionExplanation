Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

 
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head ==null) //check if empty list
            return null;
        if(head.next ==null) // check if only one element present, return the element
            return head;
        ListNode even =head.next;
        ListNode odd = head;  
        ListNode temp = even;//save start of even list.
        while(even !=null && even.next !=null){
            odd.next = odd.next.next; // every 2nd element from last odd is odd
            even.next = even.next.next; //every 2nd element from even is even
            odd = odd.next;  //point to tail of the odd list.
            even = even.next; //even pointer at the tail of the even list.
        }
        odd.next = temp;  //add head of even list to tail of odd list.
        return head; //return head
    }
}